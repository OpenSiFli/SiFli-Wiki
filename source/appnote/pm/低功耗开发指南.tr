str_cn:本文介绍了如何在客户硬件平台上基于 SiFli MCU 芯片的低功耗调试过程,str_en:This article introduces the low-power debugging process based on the SiFli MCU chip on the customer hardware platform
str_cn:SiFli MCU 芯片 为双核 Cortex-M33 STAR SoC 芯片,str_en:The SiFli MCU chip is a dual-core Cortex-M33 STAR SoC chip
str_cn:大核 HCPU 工作频率为 0~240MHz，属于 HPSYS 子系统，适用于进行图形、音频、神经网络等高性能运算,str_en:The big core HCPU operates at a frequency of 0~240MHz, belongs to the HPSYS subsystem, and is suitable for high-performance computing such as graphics, audio, and neural networks
str_cn:小核 LCPU 工作频率为 0~48MHz，属于 LPSYS 子系统，适用于运行蓝牙、传感器收集与运算等任务,str_en:The small core LCPU operates at a frequency of 0~48MHz, belongs to the LPSYS subsystem, and is suitable for tasks such as running Bluetooth, sensor collection and calculation
str_cn:低功耗开发例程参考`SDK\example\rt_device\pm\project`,str_en:For low-power development routines, refer to `SDK\example\rt_device\pm\project`
str_cn:进入 SiFli Middleware，选中“Enable Low Power Support”，打开中间件的低功耗模式支持,str_en:Enter SiFli Middleware, select "Enable Low Power Support" to turn on the low power mode support of the middleware
str_cn:“Enable PM Debug”为调试开关，如图2-1,打开则会输出低功耗相关的日志，日志具体说明参考3.3节,str_en:"Enable PM Debug" is the debug switch, as shown in Figure 2-1, if turned on, it will output logs related to low power consumption, for specific log description, refer to section 3.3
str_cn:进入 RTOS → RT-Thread Components → Device Drivers，“Using Power Management Device Drivers”为操作系统的低功耗服务选项，因为已经打开了中间件的低功耗支持，该选项已默认选中,str_en:Enter RTOS → RT-Thread Components → Device Drivers, "Using Power Management Device Drivers" is the low-power service option of the operating system, because the low-power support of the middleware has been enabled, this option is selected by default
str_cn:“Enable Standby Mode”用于配置系统是否可进入 STANDBY 低功耗模式，选中则可以进入 STANDBY 模式，如图2-2,未选中则只能进入 LIGHT低功耗模式,str_en:"Enable Standby Mode" is used to configure whether the system can enter the STANDBY low-power mode, if selected, it can enter the STANDBY mode, as shown in Figure 2-2, if not selected, it can only enter the LIGHT low-power mode
str_cn:需要注意，如果 LCPU 打开了 STANDBY 模式，那么 HCPU 也必须打开 STANDBY 模式,str_en:It should be noted that if the LCPU turns on the STANDBY mode, then the HCPU must also turn on the STANDBY mode
str_cn:配置好后,确认工程配置文件`rtconfig.h`内已包含下面的定义,str_en:After configuration, make sure that the following definitions are included in the project configuration file `rtconfig.h`
str_cn:进入 SiFli Middleware，不勾选“Enable Low Power Support”，关闭中间件的低功耗模式支持,str_en:Enter SiFli Middleware, uncheck "Enable Low Power Support" to turn off the low power mode support of the middleware
str_cn:进入 RTOS → RT-Thread Components → Device Drivers，不勾选“Using Power Management Device Drivers”，关闭操作系统的低功耗服务,str_en:Enter RTOS → RT-Thread Components → Device Drivers, uncheck "Using Power Management Device Drivers" to turn off the low power service of the operating system
str_cn:配置方法参照SDK\example\rt_device\pm\common例程,str_en:Refer to SDK\example\rt_device\pm\common routine for configuration method
str_cn:待机唤醒配置(可以用于standby/deep/light唤醒),str_en:Standby wake-up configuration (can be used for standby/deep/light wake-up)
str_cn:如下是hal层的待机唤醒API函数示例,如果IO唤醒需要处理事件,需要再配置GPIO中断,str_en:The following is an example of the standby wake-up API function at the hal layer, if the IO wake-up needs to handle events, GPIO interrupt needs to be configured
str_cn:配置是否生效,可以对照芯片手册查看对应的寄存器,str_en:To check if the configuration takes effect, you can refer to the corresponding register in the chip manual
str_cn:55系列MCU，Hibernate下，只有Lcpu的唤醒PIN0-5才具有唤醒功能，具体查看55系列用户手册PMUC WER寄存器配置,str_en:For the 55 series MCU, under Hibernate, only the wake-up PIN0-5 of Lcpu has the wake-up function, for details, check the PMUC WER register configuration in the 55 series user manual
str_cn:55系列以后的MCU，允许同时存在两个唤醒源PIN0和PIN1，每一个唤醒源可以指定到任意Hcpu/Lcpu的唤醒PIN，具体配置查看用户手册PMUC CR寄存器配置,str_en:For MCUs after the 55 series, two wake-up sources PIN0 and PIN1 are allowed to exist simultaneously, each wake-up source can be specified to any Hcpu/Lcpu wake-up PIN, for specific configuration, check the PMUC CR register configuration in the user manual
str_cn:Hibernate关机后，唤醒后等同于冷启动（但有PM_HIBERNATE_BOOT标志位），不同于Standby唤醒能恢复到原有程序继续跑，唤醒PIN和电平模式由PMU寄存器来控制,相关配置是否生效，可以打印对应PMU的WER, CR寄存器值对照查看,str_en:After Hibernate shutdown, waking up is equivalent to a cold start (but with the PM_HIBERNATE_BOOT flag), unlike Standby wake-up which can resume the original program, the wake-up PIN and level mode are controlled by the PMU register, whether the relevant configuration takes effect can be checked by printing the corresponding PMU's WER, CR register values
str_cn:注意:,str_en:Note: 
str_cn:如果一个IO口，需要待机和关机都需要唤醒，上述两者都需要配置,str_en:If an IO port needs to be woken up during standby and shutdown, both of the above need to be configured
str_cn:HPSYS 和 LPSYS 均支持以下四种低功耗模式，方案中仅使用了 IDLE、LIGHT 和 STANDBY 三种模式,str_en:HPSYS and LPSYS both support the following four low-power modes, but only the IDLE, LIGHT, and STANDBY modes are used in the solution
str_cn:CPU 停在 WFI 或 WFE 指令，系统有高速时钟，外设可以工作，所有中断都能 唤醒系统退出 WFI 或 WFI 指令,str_en:The CPU stops at the WFI or WFE instruction, the system has a high-speed clock, peripherals can work, and all interrupts can wake up the system to exit the WFI or WFI instruction
str_cn:子系统进入 LIGHT 低功耗模式，系统高速时钟关闭，切换到 32K 时钟，外设 停止工作，CPU 与外设均不掉电，可被有限的唤醒源唤醒,str_en:The subsystem enters the LIGHT low-power mode, the system high-speed clock is turned off, switched to the 32K clock, peripherals stop working, neither the CPU nor peripherals lose power, and can be awakened by limited wake-up sources
str_cn:子系统进入 DEEP 低功耗模式，供电切换到 RET_LDO，系统高速时钟关闭，切 换到 32K 时钟，外设停止工作，CPU 与外设均不掉电，可被有限的唤醒源唤醒,str_en:The subsystem enters the DEEP low-power mode, the power supply switches to RET_LDO, the system high-speed clock is turned off, switched to the 32K clock, peripherals stop working, neither the CPU nor peripherals lose power, and can be awakened by limited wake-up sources
str_cn:子系统进入 STANDBY 低功耗模式，供电切换到 RET_LDO，系统高速时钟 关闭，切换到 32K 时钟，CPU 与外设均掉电，可被有限的唤醒源唤醒,str_en:The subsystem enters the STANDBY low-power mode, the power supply switches to RET_LDO, the system high-speed clock is turned off, switched to the 32K clock, both the CPU and peripherals lose power, and can be awakened by limited wake-up sources
str_cn:不可访问，全保留,str_en:Inaccessible, fully retained
str_cn:唤醒中断,str_en:Wake-up interrupt
str_cn:数据不保留,str_en:Data not retained
str_cn:高阻,str_en:High impedance
str_cn:RTC和PIN,str_en:RTC and PIN
str_cn:以上电流数据仅供参考，实际数值会因为外设的使能和 IO 设置不同有所增大,str_en:The above current data are for reference only, actual values may increase due to different peripheral enablement and IO settings
str_cn:表示停止工作，退出低功耗模式后不需要重新配置即可继续工作,str_en:Indicates stop working, no reconfiguration is needed to continue working after exiting the low power mode
str_cn:表示停止工作且退出低功耗模式后已被复位，对于 CPU 会从 ROM 开始执行，对于外设需要重新配置才能工作,str_en:Indicates stop working and has been reset after exiting the low power mode, the CPU will start executing from ROM, peripherals need to be reconfigured to work
str_cn:方案中，只有在熄屏之后，HPSYS 才能进入睡眠模式，亮屏状态下，当 HCPU 不工作时，HPSYS 只能进入 IDLE 模式,str_en:In the solution, HPSYS can enter sleep mode only after the screen is off. In the screen-on state, when HCPU is not working, HPSYS can only enter IDLE mode
str_cn:只有当 HPSYS 进入睡眠模式后，LPSYS 才能进入睡眠模式，如果 HPSYS 没有睡眠，即使 LCPU 不工作，LPSYS 也只能进入 IDLE 模式,str_en:LPSYS can enter sleep mode only after HPSYS enters sleep mode. If HPSYS does not sleep, even if LCPU is not working, LPSYS can only enter IDLE mode
str_cn:在 HPSYS 已睡眠的情况下，LPSYS 可以自由进出睡眠模式，不必唤醒 HPSYS,str_en:In the case that HPSYS has been asleep, LPSYS can freely enter and exit the sleep mode without waking up HPSYS
str_cn:锁屏时间可在设置界面选择，当屏幕无操作超过锁屏时间后屏幕熄灭，在 IDLE 线程中检查睡眠条件，若满足条件，则 HPSYS 进入睡眠模式，LPSYS 随之也可进入睡眠模式,str_en:The screen lock time can be selected in the setting interface. When the screen is not operated for more than the lock screen time, the screen turns off. The sleep conditions are checked in the IDLE thread, if the conditions are met, HPSYS enters the sleep mode, and LPSYS can also enter the sleep mode
str_cn:HPSYS 可被以下事件唤醒,str_en:HPSYS can be woken up by the following events
str_cn:来自手机 APP 的事件,str_en:Events from mobile APP
str_cn:来自 Sensor 算法的事件,str_en:Events from Sensor algorithms
str_cn:HPSYS 被唤醒后可有选择的亮屏，对于以下几种事件，无需亮屏，其它事件都需要唤醒屏幕,str_en:After HPSYS is awakened, it can selectively light up the screen. For the following events, there is no need to light up the screen, other events need to wake up the screen
str_cn:以按键唤醒亮屏为例，流程如图3-2所示，亮屏之后就进入新一轮的熄屏判断流程,str_en:Take the key press to wake up the screen as an example, the process is shown in Figure 3-2. After the screen lights up, it enters a new round of screen-off judgment process
str_cn:来自手机 APP 的 setting 事件触发的唤醒流程如下图3-3所示，当处理完 Setting 请求回到 IDLE 线程后可立即进入睡眠模式,str_en:The wake-up process triggered by the setting event from the mobile APP is shown in Figure 3-3 below. After handling the Setting request and returning to the IDLE thread, it can immediately enter the sleep mode
str_cn:LPSYS 可被以下事件唤醒,str_en:LPSYS can be woken up by the following events
str_cn:Sensor 数据采集定时器超时,str_en:Sensor data collection timer timeout
str_cn:BLE 周期性定时器超时,str_en:BLE periodic timer timeout
str_cn:HCPU 和 LCPU 会通过 console 输出日志，按照2.1节的方法打开低功耗调试开关后，可以在日志中搜索表格中的关键字分析系统的低功耗流程,str_en:HCPU and LCPU will output logs through the console. After opening the low-power debugging switch according to the method in section 2.1, you can search for keywords in the table in the log to analyze the system's low-power process
str_cn:进入睡眠模式，mode 指示低功耗模式，2 表示 LIGHT，4 表示 STANDBY,str_en:Entering sleep mode, mode indicates low power mode, 2 means LIGHT, 4 means STANDBY
str_cn:退出睡眠模式,str_en:Exit sleep mode
str_cn:唤醒原因,str_en:Wake-up reason
str_cn:gtime 显示的时间在 HCPU 和 LCPU 两侧是同步的,str_en:The time displayed by gtime is synchronized on both sides of HCPU and LCPU
str_cn:由此可知睡眠时长为 sleep_time=(2142330-2136602)/32768=175ms，唤醒原因为 LPSYS 触发的 mailbox 中断,str_en:Thus, the sleep duration is sleep_time=(2142330-2136602)/32768=175ms, and the wake-up reason is the mailbox interrupt triggered by LPSYS
str_cn:WSR 的某个比特为 1 表示因为相应的源触发了唤醒，每个比特的含义参见对应芯片手册寄存器表,str_en:A certain bit of WSR being 1 indicates that the corresponding source triggered the wake-up, refer to the register table in the corresponding chip manual for the meaning of each bit
str_cn:由于进入睡眠模式后 SWD 无法连接，必须使用 UART 作为 console 端口抓取日志分析问题,str_en:Since SWD cannot connect after entering sleep mode, UART must be used as the console port to capture logs for problem analysis
str_cn:如果满足以下任意一个条件，则很有可能 HPSYS 进入了睡眠模式,str_en:If any of the following conditions are met, it is very likely that HPSYS has entered sleep mode
str_cn:SWD 无法连接,str_en:SWD cannot connect
str_cn:HCPU 的 console 没有应答,str_en:HCPU console does not respond
str_cn:HCPU 的日志中出现“s: mode, gtime”,str_en:"s: mode, gtime" appears in the HCPU log
str_cn:如果满足以下任意一个条件，则很有可能 LPSYS 进入了睡眠模式,str_en:If any of the following conditions are met, it is very likely that LPSYS has entered sleep mode
str_cn:LCPU 的 console 没有应答,str_en:LCPU console does not respond
str_cn:LCPU 的日志中出现“s: mode, gtime”,str_en:"s: mode, gtime" appears in the LCPU log
str_cn:需要确认 LCPU 已打开了 Command shell 中的 finsh shell 选项,str_en:It needs to confirm that the finsh shell option in the Command shell has been opened in LCPU
str_cn:也可以通过测量芯片的电源管脚电压，可以判断当前处于何种低功耗模式,str_en:It is also possible to determine the current low-power mode by measuring the voltage of the chip's power pins
str_cn:当 HPSYS 处于 active，sleep 或 deepsleep 模式时，LDO1_VOUT 电压保持 1.1V,str_en:When HPSYS is in active, sleep or deepsleep mode, LDO1_VOUT voltage remains at 1.1V
str_cn:当 HPSYS 处于 standby 模式时，LDO1_VOUT 电压无法保持，会逐渐下降到 0V,str_en:When HPSYS is in standby mode, LDO1_VOUT voltage cannot be maintained and will gradually drop to 0V
str_cn:当 LPSYS 处于 active，sleep 或 deepsleep 模式时，LDO2_VOUT 或 BUCK2_VOUT 电压保持 0.9V,str_en:When LPSYS is in active, sleep or deepsleep mode, LDO2_VOUT or BUCK2_VOUT voltage remains at 0.9V
str_cn:当 LPSYS 处于 standby 模式时，LDO2_VOUT 或 BUCK2_VOUT 电压无法保持，会逐渐下降到 0V,str_en:When LPSYS is in standby mode, LDO2_VOUT or BUCK2_VOUT voltage cannot be maintained and will gradually drop to 0
str_cn:确认rtconfig.h中已经生成了如下宏,str_en:Confirm that the following macros have been generated in rtconfig.h
str_cn:开启低功耗模式,str_en:Enable low power mode
str_cn:进入standby模式的低功耗,str_en:Enter standby mode for low power consumption
str_cn:建议standby休眠,str_en:Standby hibernation is recommended
str_cn:进入Deep模式的低功耗,str_en:Enter Deep mode for low power consumption
str_cn:建议Deep休眠,str_en:Deep hibernation is recommended
str_cn:打开低功耗模式调试log,str_en:Turn on the debug log for low power mode
str_cn:确认CPU已空闲并进入idle线程,str_en:Ensure that the CPU is idle and enters the idle thread
str_cn:可以通过finsh串口命令：list_thread看下所有线程的状态,str_en:You can use the finsh serial command: list_thread to check the status of all threads
str_cn:只有除了tshell和tidle是ready的，其他应该都是suspend状态,str_en:Only tshell and tidle should be in the ready state, while others should be in the suspend state
str_cn:否则一直处于 ready 的线程会导致 IDLE 线程无法运行，系统进入不了睡眠,str_en:Otherwise, a thread that remains in the ready state will prevent the IDLE thread from running, causing the system to be unable to enter sleep mode
str_cn:我在app_watch_entry()函数中，添加了一条__asm("B .")死循环指令，导致app_watch的线程无法进入suspend，导致无法睡眠,str_en:I added an __asm("B .") infinite loop instruction in the app_watch_entry() function, causing the app_watch thread to be unable to enter suspend, resulting in failure to sleep
str_cn:确认未禁止进入睡眠,str_en:Ensure that entering sleep mode is not prohibited
str_cn:在console中发送命令`pm_dump`,出现如图3-7信息,str_en:Send the command `pm_dump` in the console, and the information shown in Figure 3-7 appears
str_cn:如果 Idle Mode 的 Counter 大于 0，则表示有模块调用`rt_pm_request(PM_SLEEP_MODE_IDLE)`禁止了睡眠,str_en:If the Counter in Idle Mode is greater than 0, it means that a module has called `rt_pm_request(PM_SLEEP_MODE_IDLE)` to prohibit sleep
str_cn:检查代码是否漏调用了`rt_pm_release(PM_SLEEP_MODE_IDLE)`解除了睡眠抑制,str_en:Check whether the code has missed calling `rt_pm_release(PM_SLEEP_MODE_IDLE)` to lift the sleep inhibition
str_cn:如果为 0，则表示没有禁止睡眠,str_en:If it is 0, it means that sleep is not prohibited
str_cn:确认操作系统的定时器超时时间大于睡眠门限,str_en:Ensure that the timeout time of the operating system timer is greater than the sleep threshold
str_cn:在 console 中发送命令`list_timer`，显示操作系统的所有已创建的定时器,str_en:Send the command `list_timer` in the console to display all created timers of the operating system
str_cn:将 flag 为 activated 定时器的 timeout 值与睡眠门限作比较,str_en:Compare the timeout value of the timer with the flag set to activated with the sleep threshold
str_cn:若小于睡眠门限，则表示因为该定时器导致无法进入睡眠,str_en:If it is less than the sleep threshold, it indicates that the timer causes the inability to enter sleep mode
str_cn:操作系统定时器timeout 的单位为 ms,str_en:The unit of the operating system timer timeout is ms
str_cn:Hcpu 当100ms之内没有定时器唤醒,就进入standby休眠,str_en:Hcpu enters standby hibernation when there is no timer wake-up within 100ms
str_cn:Lcpu 当10ms之内没有定时器唤醒,就进入standby休眠,str_en:Lcpu enters standby hibernation when there is no timer wake-up within 10ms
str_cn:Hcpu 当100ms之内没有定时器唤醒,就进入Deep休眠,str_en:Hcpu enters Deep hibernation when there is no timer wake-up within 100ms
str_cn:Lcpu 当10ms之内没有定时器唤醒,就进入Deep休眠,str_en:Lcpu enters Deep hibernation when there is no timer wake-up within 10ms
str_cn:如果Hcpu代码中存在90ms的延时(90ms定时器唤醒),Hcpu则永远不会进入休眠,str_en:If there is a 90ms delay (90ms timer wake-up) in the Hcpu code, Hcpu will never enter hibernation
str_cn:HAL 层延时函数,str_en:HAL layer delay function
str_cn:等同于 while 中指令循环，延时时不会切到其他线程,str_en:Equivalent to the instruction loop in while, during the delay, it will not switch to other threads
str_cn:RTT 接口的延时函数,str_en:RTT interface delay function
str_cn:RTT 接口的延时函数执行时，会切换到其他线程，比如 ilde 线程,str_en:When the RTT interface delay function is executed, it will switch to other threads, such as the ilde thread
str_cn:当睡眠门限低于延时时长时会进入 Standby 睡眠,str_en:When the sleep threshold is lower than the delay duration, it will enter Standby sleep
str_cn:确认没有存在没有处理的唤醒源,str_en:Ensure that there are no unprocessed wakeup sources
str_cn:如果存在唤醒源，没有清掉，就不会进入睡眠,str_en:If there are wakeup sources and they are not cleared, it will not enter sleep mode
str_cn:可以通过串口命令，去读Hcpu和Lcpu的WSR寄存器,str_en:You can use serial commands to read the WSR registers of Hcpu and Lcpu
str_cn:在 console 中发送命令 regop read 读取 WER 和 WSR 寄存器,str_en:Send the command regop read in the console to read the WER and WSR registers
str_cn:检查是否有唤醒源导致无法睡眠,str_en:Check if there are any wakeup sources causing the inability to sleep
str_cn:也可以连上Jlink/SifliUsartServer等调试器读取寄存器的值,str_en:You can also connect to debuggers like Jlink/SifliUsartServer to read the register values
str_cn:还可以通过log打印的方式，获取WSR的值,str_en:You can also obtain the WSR value by printing logs
str_cn:参照对应芯片手册寄WSR寄存器对照具体唤醒源,str_en:Refer to the corresponding chip manual for the WSR register to compare specific wakeup sources
str_cn:常见的就是唤醒pin的电平状态不对，比如设置的低电平唤醒，但是该唤醒pin电平却是一直低电平,str_en:A common issue is incorrect pin level status for wakeup, for example, setting low-level wakeup but the pin level is always low
str_cn:确认给另外一个核的数据已经被读走,str_en:Ensure that the data for another core has been read
str_cn:可以通过Ozone连接、dump内存后用trace32查看或者log打印的方式,str_en:You can use Ozone connection, dump memory and then view with trace32 or print logs
str_cn:查看ipc_ctx变量中每一个queues为active的tx_buffer,str_en:Check every tx_buffer in ipc_ctx variable where queues are active
str_cn:来看是否存在数据没有被取走,str_en:To see if there is any data that has not been taken away
str_cn:read_idx_mirror和write_idx_mirror正常为相等或者为空,str_en:read_idx_mirror and write_idx_mirror are normally equal or empty
str_cn:如果不相等，即有数据没有被取走，会导致无法进入睡眠,str_en:If they are not equal, meaning there is data that has not been taken, it will cause failure to enter sleep mode
str_cn:Hcpu由于Lcpu没有开启data service服务，缺失qid=1的通道，Hcpu发的数据，Lcpu没有取走，导致Hcpu不进入睡眠的例子,str_en:An example where Hcpu does not enter sleep mode because Lcpu did not open the data service, missing the channel with qid=1, so the data sent by Hcpu was not taken by Lcpu
str_cn:如果 HPSYS 和 LPSYS 都已进入睡眠模式，整机功耗优化的重点从下面三点展开,str_en:If both HPSYS and LPSYS have entered sleep mode, the focus of overall power consumption optimization unfolds from the following three points
str_cn:屏,外设sensor，充电ic，这些能拆掉的先拆掉,查看最小系统电流,str_en:Screen, peripheral sensors, charging IC, these removable components should be removed first to check the minimum system current
str_cn:软件上IO电平配置不对，形成电压差，导致漏电,str_en:Incorrect IO level configuration in software creates voltage difference, leading to leakage
str_cn:板级器件未断电,str_en:The board-level device is not powered off
str_cn:板级器件已掉电，但芯片管脚设置不正确导致电流由芯片管脚倒灌入板级器件,str_en:The board-level device has lost power, but incorrect chip pin settings cause current to flow back from the chip pins into the board-level device
str_cn:要避免连接掉电器件的芯片管脚输出高或者使能了上拉电阻,str_en:To avoid the chip pin connected to the powered-off device from outputting high or enabling the pull-up resistor
str_cn:根据前述对漏电原因的分析，常用外设管脚在工作状态和睡眠状态下的配置方法见表格4-1,str_en:According to the aforementioned analysis of the causes of leakage, the configuration methods for commonly used peripheral pins in working and sleep states can be found in Table 4-1
str_cn:当外部电路不掉电时，由于电路状态没有发生变化，即使进入睡眠模式也无需改变管脚配置,str_en:When the external circuit does not lose power, since the circuit state has not changed, there is no need to change the pin configuration even when entering sleep mode
str_cn:只有当外部电路掉电时才需修改相关管脚的设置,str_en:It is only necessary to modify the settings of the relevant pins when the external circuit loses power
str_cn:如果在未睡眠的情况下外部电路就已掉电，应立即修改管脚设置降低功耗,str_en:If the external circuit has already lost power without entering sleep mode, the pin settings should be modified immediately to reduce power consumption
str_cn:如果睡眠醒来后外部电路仍旧处于掉电状态，因为管脚设置会因为掉电而恢复默认值，需要再次修改为掉电状态的设置,str_en:If the external circuit is still in a power-off state after waking up from sleep, because the pin settings will revert to default values due to power loss, they need to be modified again to the power-off state settings
str_cn:输入管脚悬空（对端设备断电等同于管脚悬空）导致电平不确定,str_en:The input pin is floating (the power-off of the remote device is equivalent to the pin floating), resulting in an uncertain level
str_cn:IO输出电平和内外部上下拉电阻不匹配,str_en:The IO output level does not match the internal and external pull-up/pull-down resistors
str_cn:DS – driving strength,str_en:DS - driving strength
str_cn:OE – output enable,str_en:OE - output enable
str_cn:O – output,str_en:O - output
str_cn:I – input,str_en:I - input
str_cn:IE – input enable,str_en:IE - input enable
str_cn:PE – pull enable,str_en:PE - pull enable
str_cn:PS – pull select,str_en:PS - pull select
str_cn:推挽输出（push-pull）,str_en:Push-pull output
str_cn:开漏输出（open-drain）,str_en:Open-drain output
str_cn:55系列,USB的PA01口内部默认有个 18K 欧姆的下拉电阻，当输出高或者外接高电平时会产生漏电,str_en:For the 55 series, the PA01 port of USB has an internal default 18K ohm pull-down resistor, which will cause leakage when outputting high or connecting to a high external voltage
str_cn:处理方法参考FAQ常见问题解答的章节 [1.6 55系列MCU复用USB的PA01/PA03漏电风险],str_en:The handling method can be found in section [1.6 Risk of Leakage for PA01/PA03 Multiplexing USB in 55 Series MCU] of the FAQ
str_cn:PSRAM进出Half_sleep的方法,str_en:The method for PSRAM to enter and exit Half_sleep
str_cn:下面代码演示nor flash掉电和进出deep sleep的方法,str_en:The following code demonstrates the method for nor flash power-down and entering/exiting deep sleep
str_cn:关闭nor flash供电的方法,str_en:The method to turn off nor flash power supply
str_cn:关闭供电后,flash的IO需要改成下拉,str_en:After turning off the power supply, the IO of flash needs to be changed to pull-down
str_cn:nor flash 进入deep sleep的方法,这种方式,IO的状态不需要修改,str_en:The method for nor flash to enter deep sleep, in this way, the status of IO does not need to be modified
str_cn:打开nor flash供电前,先配置IO为工作态,str_en:Before turning on nor flash power supply, configure IO to working state first
str_cn:打开nor flash供电,str_en:Turn on nor flash power supply
str_cn:断电后,需要重初始化nor flash,str_en:After power-off, it is necessary to reinitialize nor flash
str_cn:nor flash 退出deep sleep的方法,这种方式,IO的状态不需要修改,str_en:The method for nor flash to exit deep sleep, in this way, the status of IO does not need to be modified
str_cn:退出 deep sleep后需要一定延时,具体延时需要查看flash芯片手册,str_en:A certain delay is required after exiting deep sleep, the specific delay needs to check the flash chip manual
str_cn:对于代码XIP运行在nor flash的情况下,操作nor flash进入休眠的代码要声明放在RAM内运行`HAL_RAM_RET_CODE_SECT`,str_en:For the case where the XIP code runs on nor flash, the code for operating nor flash into sleep needs to be declared to run inside RAM `HAL_RAM_RET_CODE_SECT`
str_cn:管脚的配置代码实现在开发板的 pinmux.c 和 drv_io.c(55系列),bsp_power.c(58,56,52系列) 文件中，需要根据开发板的 IO 功能定义与硬件设计实现 `BSP_PIN_Init`、`BSP_Power_Up` 和 `BSP_IO_Power_Down` 等接口。,str_en:The pin configuration code is implemented in the development board's pinmux.c and drv_io.c (series 55), bsp_power.c (series 58, 56, 52) files. It is necessary to implement interfaces such as `BSP_PIN_Init`, `BSP_Power_Up`, and `BSP_IO_Power_Down` based on the IO function definitions and hardware design of the development board.
str_cn:BSP_PIN_Init 在冷启动和 STANDBY 醒来都会被执行一次，可以在 BSP_PIN_Init 中设定工作状态下每个管脚的功能和输入输出模式。,str_en:BSP_PIN_Init will be executed once during cold boot and waking up from STANDBY. The function and input/output mode of each pin in the working state can be set in BSP_PIN_Init.
str_cn:使用函数 HAL_PIN_Set 选择管脚的功能以及上下拉属性。比如下面的示例代码将 PB46 管脚配置为 USART3_RX 功能，并设置为数字输入上拉模式。,str_en:Use the function HAL_PIN_Set to select the function and pull-up/pull-down attributes of the pin. For example, the following sample code configures the PB46 pin as USART3_RX function and sets it to digital input pull-up mode.
str_cn:如果只是配置PA35为IO,`PIN_NOPULL`,后续并没有配置GPIO输出高低，否则 GPIO 管脚默认为输入模式，就会出现输入口悬空漏电的情况,还需要调用 GPIO 接口输出确定电平，可以HAL层函数 BSP_GPIO_Set 设置 GPIO 的输出电平,RTOS起来后,用diver层输出高低也可以。,str_en:If only configure PA35 as IO, `PIN_NOPULL`, and do not configure GPIO output high or low afterwards, otherwise the GPIO pin defaults to input mode, there will be a situation of floating input port leakage. It is also necessary to call the GPIO interface to output a determined level. The HAL layer function BSP_GPIO_Set can set the GPIO output level, and after RTOS starts, the driver layer can also output high or low.
str_cn:如果想恢复到输入模式，可以调用 HAL_GPIO_DeInit。,str_en:If you want to restore to input mode, you can call HAL_GPIO_DeInit.
str_cn:睡眠状态管脚设置,str_en:Pin settings for sleep state
str_cn:进入睡眠前执行,str_en:Executed before entering sleep
str_cn:唤醒后执行(对于 STANDBY 模式唤醒，在 BSP_PIN_Init 后执行),str_en:Executed after waking up (for STANDBY mode wakeup, executed after BSP_PIN_Init)
str_cn:熄屏后执行,str_en:Executed after screen off
str_cn:亮屏前执行,str_en:Executed before lighting the screen
str_cn:如果板级器件的掉电和上电控制都伴随睡眠进行，可以在 BSP_IO_Power_Down 中将板级器件断电并修改相应的管脚设置，反向操作则在 BSP_Power_Up 中完成。但这种方法的缺点是控制不够精细，比如熄屏后，可能过一段时间 HPSYS 才会进入睡眠，在此之前如果仍旧给 LCD 供电的话就会增加耗电，或者当 HPSYS 被唤醒执行一段时间任务但又不需要亮屏时，如果在 BSP_Power_Up 中就打开屏幕的供电，也会增加耗电。,str_en:If the power-off and power-on control of the board-level devices are carried out along with sleep, the board-level devices can be powered off and the corresponding pin settings can be modified in BSP_IO_Power_Down, and the reverse operation is completed in BSP_Power_Up. But the disadvantage of this method is that the control is not precise enough. For example, after the screen is turned off, it may take some time for HPSYS to enter sleep. If the LCD is still powered before that, it will increase power consumption, or when HPSYS is awakened to perform tasks for a period of time but does not need to light the screen, if the screen power supply is turned on in BSP_Power_Up, it will also increase power consumption.
str_cn:为此，用户可以在 BSP_IO_Power_Down 和 BSP_Power_Up 中实现更复杂的控制逻辑。以屏幕与触控为例，将屏幕与触控的掉电处理放在 BSP_TP_PowerDown 和 BSP_LCD_PowerDown 中，这样一旦熄屏后屏幕与触控芯片即可,str_en:To this end, users can implement more complex control logic in BSP_IO_Power_Down and BSP_Power_Up. Taking the screen and touch as an example, put the power-down processing of the screen and touch in BSP_TP_PowerDown and BSP_LCD_PowerDown, so that once the screen is turned off, the screen and touch chips can
str_cn:马上断电，而在 BSP_Power_Up 里需要再次调用 BSP_TP_PowerDown 和 BSP_LCD_PowerDown，这样即使 HPSYS 被唤醒，也可以将管脚的设置恢复到掉电状态,str_en:The power will be cut off immediately, and in BSP_Power_Up, it is necessary to call BSP_TP_PowerDown and BSP_LCD_PowerDown again, so that even if HPSYS is awakened, the pin settings can be restored to the power-off state
str_cn:如果满足了亮屏条件，系统会在亮屏前调用 BSP_TP_PowerUp 和 BSP_LCD_PowerUp 恢复屏幕与触控的供电与工作状态下的管脚设置,str_en:If the screen-on conditions are met, the system will call BSP_TP_PowerUp and BSP_LCD_PowerUp before turning on the screen to restore the power supply of the screen and touch control and the pin settings under working conditions
str_cn:hcpu休眠唤醒,str_en:Hcpu sleep and wake up
str_cn:在 hcpu 进入 idle 线程，并判断是否符合休眠条件，会按下面流程进行休眠和唤醒,str_en:When hcpu enters the idle thread and determines whether the sleep conditions are met, the following process will be followed for sleep and wake-up
str_cn:Lcpu休眠唤醒流程跟 hcpu 待机流程基本一样,str_en:The Lcpu sleep and wake-up process is basically the same as the hcpu standby process
str_cn:55系列跟56系列待机流程一样，差异点在唤醒的函数不一样,str_en:The 55 series has the same standby process as the 56 series, with the difference being in the wake-up functions
str_cn:52系列跟56系列的待机流程差异的点在进的是`sifli_deep_handler()`待机函数,并且少了外设的SUSPEND/RESUME和恢复现场过程，睡眠唤醒更快,str_en:The difference between the 52 series and the 56 series in the standby process is that the former enters the `sifli_deep_handler()` standby function, and lacks the peripheral SUSPEND/RESUME and context restoration process, making sleep and wake-up faster
str_cn:52系列的Lcpu不开放代码修改，这块不用考虑,str_en:The Lcpu of the 52 series does not allow code modification, so this part does not need to be considered
str_cn:进入Hibernate流程相对简单，调用`HAL_PMU_EnterHibernate()`函数，芯片在休眠前，都需要配置好Hibernate后PMU的唤醒PIN和唤醒电平,str_en:The process of entering Hibernate is relatively simple, calling the `HAL_PMU_EnterHibernate()` function, and configuring the PMU's wake-up PIN and wake-up level after Hibernate before the chip goes to sleep
str_cn:55系列MCU不需要再做其他处理,str_en:The 55 series MCU does not require any further processing
str_cn:56，56系列MCU，由于唤醒PIN多了一套在Hibernate生效的PMU上下拉系统，避免漏电，可以用函数`HAL_PIN_Set`配置好唤醒PIN的上下拉,str_en:For the 56, 56 series MCU, due to an additional set of PMU pull-up/pull-down systems effective in Hibernate for the wake-up PIN to prevent leakage, the function `HAL_PIN_Set` can be used to configure the pull-up/pull-down of the wake-up PIN
str_cn:52系列MCU由于内置了3个LDO，需要查看你的硬件连接，来考虑是否通过函数`HAL_PMU_ConfigPeriLdo`配置关闭,str_en:Since the 52 series MCU has three built-in LDOs, you need to check your hardware connections to consider whether to configure shutdown via the function `HAL_PMU_ConfigPeriLdo`
str_cn:按下唤醒PIN从Hibernate唤醒后，可以判断`(PM_HIBERNATE_BOOT == SystemPowerOnModeGet())`是否为`hibernate boot`和按键的时间长短来判断是否需要开机,str_en:After pressing the wake-up PIN to wake up from Hibernate, you can determine whether `(PM_HIBERNATE_BOOT == SystemPowerOnModeGet())` is `hibernate boot` and the duration of the key press to decide whether to boot up
str_cn:进入Hibernate冬眠关机模式,str_en:Enter Hibernate hibernation shutdown mode
str_cn:调用函数HAL_PMU_EnterHibernate()，在进入Hibernate前，配置好PMU的唤醒PIN和唤醒电平，确保进入Hibernate冬眠关机模式后能够被唤醒,str_en:Call the function HAL_PMU_EnterHibernate() Before entering Hibernate, configure the PMU's wake-up PIN and wake-up level to ensure that it can be woken up after entering Hibernate hibernation shutdown mode
str_cn:55系列MCU在hibernate下唤醒PIN都为浮空输入态， 为防止浮空漏电，需要外部电路给定上下拉状态,str_en:The wake-up PIN of the 55 series MCU is in a floating input state under hibernate. To prevent floating leakage, external circuits need to provide pull-up/pull-down states
str_cn:58，56，52系列MCU，为了解决55系列MCU进入Hibernate关机模式需要外部额外上下拉电阻的问题，在唤醒PIN多了一套在Hibernate下生效的PMU上下拉系统,str_en:The 58, 56, 52 series MCUs, in order to solve the problem of the 55 series MCU requiring additional external pull-up/pull-down resistors when entering Hibernate shutdown mode, have an additional set of PMU pull-up/pull-down systems effective under Hibernate for the wake-up PIN
str_cn:建议用函数`HAL_PIN_Set`配置好唤醒PIN的上下拉,str_en:It is recommended to use the function `HAL_PIN_Set` to configure the pull-up/pull-down of the wake-up PIN
str_cn:`hwp_pmuc->WKUP_CNT`寄存器可以配置在hibernate后外部信号需要持续多长时间可以唤醒,str_en:The `hwp_pmuc->WKUP_CNT` register can be configured for how long the external signal needs to last to wake up after hibernate
str_cn:如下代码是52系列MCU进入Hibernate前的配置,str_en:The following code is the configuration before the 52 series MCU enters Hibernate
str_cn:注意,str_en:Note
str_cn:55系列MCU，由于每个唤醒pin都可以单独使能，配置Hibernate唤醒源只需要调用函数HAL_PMU_EnablePinWakeup使能对应的唤醒pin就可以了,str_en:For the 55 series MCU, since each wake-up pin can be enabled individually, configuring the Hibernate wake-up source only requires calling the function HAL_PMU_EnablePinWakeup to enable the corresponding wake-up pin
str_cn:58，56，52系列MCU只允许同时存在2个唤醒源pin0,pin1,这里就需要多一个步骤，调用函数HAL_PMU_SelectWakeupPin选择的pin0，pin1对应哪一个具体唤醒pin，对应寄存器配置参考hwp_pmuc->CR,str_en:For the 58, 56, and 52 series MCU, only two wake-up source pins (pin0 and pin1) are allowed to exist simultaneously. An additional step is required here: call the function HAL_PMU_SelectWakeupPin to select which specific wake-up pin corresponds to pin0 and pin1. Refer to hwp_pmuc->CR for the corresponding register configuration
str_cn:52系列MCU的#WKUP_PIN4-9（PA28-PA33）由于内部和ADC复用，已经取消唤醒口功能，当作普通IO口,str_en:The #WKUP_PIN4-9 (PA28-PA33) of the 52 series MCU have been repurposed as general IO ports due to internal multiplexing with ADC, and their wake-up port functionality has been removed
str_cn:处理方式见下图红框内，断开了外部IO，并且内部拉低,str_en:The handling method is shown in the red box in the figure below, where the external IO is disconnected and internally pulled low
str_cn:Hibernate下不用处理不会漏电,str_en:No processing is needed under Hibernate mode to avoid leakage
str_cn:但不能直接操作寄存器`hwp_rtc->PAWK1R,hwp_rtc->PAWK2R`为上拉，否则可能会漏电,str_en:However, directly manipulating the registers `hwp_rtc->PAWK1R, hwp_rtc->PAWK2R` to pull up may cause leakage
str_cn:Hibernate唤醒判断,str_en:Hibernate Wake-up Judgment
str_cn:按下唤醒PIN从Hibernate唤醒后，可以判断`if(PM_HIBERNATE_BOOT == SystemPowerOnModeGet())`是否为`hibernate boot`和按键的时间长短来判断是否需要开机,str_en:After pressing the wake-up PIN to wake up from Hibernate, you can determine whether it is a `hibernate boot` by checking `if(PM_HIBERNATE_BOOT == SystemPowerOnModeGet())` and judging the duration of the key press to decide whether to power on
