str_cn:SF32LB52X为双核芯片，有内置和外置多个存储接口,str_en:SF32LB52X is a dual-core chip with multiple built-in and external storage interfaces
str_cn:MPI1为内置存储接口，可接PSRAM与NOR Flash,str_en:MPI1 is a built-in storage interface that can connect to PSRAM and NOR Flash
str_cn:MPI2和SDMMC为外置存储，MPI2可接NOR/PSRAM/NAND，SDMMC可接SD-NAND或SD-eMMC,str_en:MPI2 and SDMMC are external storage, MPI2 can connect to NOR/PSRAM/NAND, SDMMC can connect to SD-NAND or SD-eMMC
str_cn:应用程序运行在大核，蓝牙Controller协议栈运行在小核，小核不对用户开放，小核的启动由大核的蓝牙Host协议栈控制，用户无需关心,str_en:The application runs on the big core, and the Bluetooth Controller protocol stack runs on the small core. The small core is not open to users, and its startup is controlled by the Bluetooth Host protocol stack on the big core, so users don't need to worry about it
str_cn:大核上的应用程序启动流程分为三个阶段,str_en:The application startup process on the big core is divided into three stages
str_cn:一级Bootloader：固化在SF32LB52X内部的ROM中，加载Flash中的二级Bootloader到RAM中跳转运行,str_en:First stage Bootloader: embedded in the ROM inside SF32LB52X, loads the second stage Bootloader from Flash into RAM and jumps to run
str_cn:二级Bootloader：加载Flash中的应用程序并跳转执行,str_en:Second stage Bootloader: loads the application from Flash and jumps to execute
str_cn:应用程序：用户程序,str_en:Application: user program
str_cn:一级Bootloader固化在了芯片的ROM中，其中断向量表地址为0,str_en:The first stage Bootloader is solidified in the ROM of the chip, and its interrupt vector table address is 0
str_cn:上电后会首先运行一级Bootloader，根据芯片封装类型，确定Flash分区表的位置,str_en:After power-on, the first stage Bootloader will run first, and determine the location of the Flash partition table according to the chip package type
str_cn:一级Bootloader阶段大核以上电默认的时钟频率运行，初始化启动Flash的IO配置,str_en:In the first stage Bootloader phase, the big core runs at the default clock frequency after power-on, and initializes the IO configuration of the boot Flash
str_cn:二级Bootloader根据芯片封装类型以及Flash分区表，加载应用程序并跳转执行,str_en:The second stage Bootloader loads the application and jumps to execute according to the chip package type and Flash partition table
str_cn:对于有内置PSRAM的封装类型，二级bootloader会打开LDO1V8并初始化PSRAM,str_en:For package types with built-in PSRAM, the second stage bootloader will turn on LDO1V8 and initialize PSRAM
str_cn:二级Bootloader不加载PMU的校准参数，仅修改所使用的存储相关的IO设置,str_en:The second stage Bootloader does not load the calibration parameters of PMU, it only modifies the IO settings related to the storage used
str_cn:Cache未使能，MPU未使能,str_en:Cache is not enabled, MPU is not enabled
str_cn:应用程序的入口函数为ResetHandler,str_en:The entry function of the application is ResetHandler
str_cn:SystemInit在变量初始化之前执行,str_en:SystemInit is executed before variable initialization
str_cn:更新VTOR寄存器重定向中断向量表，调用mpu_config和cache_enable初始化MPU并使能Cache,str_en:Update VTOR register to redirect interrupt vector table, call mpu_config and cache_enable to initialize MPU and enable Cache
str_cn:rt_hw_board_init完成底层硬件初始化，例如时钟和IO配置，PSRAM和NOR Flash初始化，heap和串口console的初始化,str_en:rt_hw_board_init completes the initialization of the underlying hardware, such as clock and IO configuration, PSRAM and NOR Flash initialization, heap and serial console initialization
str_cn:HAL_Init完成HAL初始化，加载PMU的校准参数，更新时钟、IO设置， 初始化PSRAM和NOR Flash,str_en:HAL_Init completes HAL initialization, loads PMU calibration parameters, updates clock, IO settings, initializes PSRAM and NOR Flash
str_cn:Config Clock修改的设置包括,str_en:The settings modified by Config Clock include
str_cn:加载PMU校准值,str_en:Load PMU calibration values
str_cn:启动GTimer,str_en:Start GTimer
str_cn:切换PMU到RC32K,str_en:Switch PMU to RC32K
str_cn:如果使用外置XT32K，则切换RTC到XT32K,str_en:If using external XT32K, switch RTC to XT32K
str_cn:配置系统时钟为240MHz(DLL1),str_en:Configure system clock to 240MHz (DLL1)
str_cn:配置DLL2为288MHz（与二级bootloader的设置相同）,str_en:Configure DLL2 to 288MHz (same as the setting of the second stage bootloader)
str_cn:加载的PMU校准值包括,str_en:The loaded PMU calibration values include
str_cn:BUCK_CR1_BG_BUF_VOS_POLAR,str_en:BUCK_CR1_BG_BUF_VOS_POLAR
str_cn:BUCK_CR1_BG_BUF_VOS_TRIM,str_en:BUCK_CR1_BG_BUF_VOS_TRIM
str_cn:LPSYS_VOUT_VOUT,str_en:LPSYS_VOUT_VOUT
str_cn:VRET_CR_TRIM,str_en:VRET_CR_TRIM
str_cn:PERI_LDO_LDO18_VREF_SEL,str_en:PERI_LDO_LDO18_VREF_SEL
str_cn:PERI_LDO_LDO33_LDO2_SET_VOUT,str_en:PERI_LDO_LDO33_LDO2_SET_VOUT
str_cn:PERI_LDO_LDO33_LDO3_SET_VOUT,str_en:PERI_LDO_LDO33_LDO3_SET_VOUT
str_cn:AON_BG_BUF_VOS_POLAR,str_en:AON_BG_BUF_VOS_POLAR
str_cn:AON_BG_BUF_VOS_TRIM,str_en:AON_BG_BUF_VOS_TRIM
str_cn:HXT_CR1_CBANK_SEL,str_en:HXT_CR1_CBANK_SEL
str_cn:加载校准值的代码可能运行在Flash或PSRAM上,str_en:The code for loading calibration values may run on Flash or PSRAM
str_cn:rt_application_init中创建main线程，线程入口函数为main_thread_entry,str_en:In rt_application_init, the main thread is created, and the thread entry function is main_thread_entry
str_cn:当放开线程调度后（即调用rt_system_scheduler_start之后），main线程得到调度，进入main_thread_entry函数，先调用rt_components_init初始化组件，随后即调用main函数,str_en:When the thread scheduling is released (that is, after calling rt_system_scheduler_start), the main thread gets scheduled, enters the main_thread_entry function, first calls rt_components_init to initialize components, then calls the main function
str_cn:对于使用外置NOR的SF32LB523手表方案，可以认为存在两个应用程序，一个是OTA Manager，另一个是User App,str_en:For the SF32LB523 watch solution using external NOR, it can be considered that there are two applications, one is OTA Manager, and the other is User App
str_cn:每块板子需要实现如下板级驱动函数,str_en:Each board needs to implement the following board-level driver functions
str_cn:HAL_PreInit建议保持HDK的默认实现,str_en:HAL_PreInit suggests keeping the default implementation of HDK
str_cn:BSP_Power_Up唤醒后调用,str_en:BSP_Power_Up is called after waking up
str_cn:BSP_IO_Power_Down睡眠前调用,str_en:BSP_IO_Power_Down is called before sleeping
str_cn:BSP_LCD_Reset,str_en:BSP_LCD_Reset
str_cn:BSP_LCD_PowerUp屏幕上电时调用,str_en:BSP_LCD_PowerUp is called when the screen is powered on
str_cn:BSP_LCD_PowerDown屏幕断电时调用,str_en:BSP_LCD_PowerDown is called when the screen is powered off
str_cn:BSP_TP_Reset,str_en:BSP_TP_Reset
str_cn:触控上电时调用,str_en:Called when the touch control powers up
str_cn:触控断电时调用,str_en:Called when the touch control powers down
str_cn:应用程序,str_en:Application program
str_cn:由HAL_MspInit决定是否调用，现在HAL_MspInit默认实现为空函数就，以后可以改成调用BSP_IO_Init，并且提供BSP_IO_Init的标准实现为依次调用BSP_IO_Init和BSP_Power_Up,str_en:Determined by HAL_MspInit whether to call or not, the default implementation of HAL_MspInit is an empty function now, but it can be changed to call BSP_IO_Init later, providing a standard implementation of BSP_IO_Init that sequentially calls BSP_IO_Init and BSP_Power_Up
str_cn:由BSP_IO_Init调用，IO配置函数,str_en:Called by BSP_IO_Init, IO configuration function
str_cn:如果同一块板子的不同应用程序需要实现不同的HAL_MspInit功能，建议将HAL_MspInit的实现置于应用程序目录下，否则可以放在板子目录下。,str_en:If different applications on the same board need to implement different HAL_MspInit functions, it is recommended to place the implementation of HAL_MspInit under the application directory, otherwise, it can be placed under the board directory.
str_cn:建议使用deepsleep低功耗模式（睡眠模式），该模式下所有RAM数据和硬件配置都能保持，从睡眠模式回到工作状态所需的恢复时间也较短，睡眠期间IO电平可以保持在工作时的状态，但睡眠模式下外设停止工作，CPU只能被有限几个唤醒源唤醒，包括GPIO中断、RTC中断、LPTIM中断以及核间通信中断。对应用程序而言，睡眠模式与工作模式间的切换是透明的，是否进入睡眠模式由最低优先级的IDLE线程控制，当所有高优先级线程都没有任务执行，IDLE线程得到调度后，IDLE线程会检查是否满足睡眠条件，当满足以下所有条件后，即可进入睡眠模式：,str_en:It is recommended to use the deepsleep low-power mode (sleep mode). In this mode, all RAM data and hardware configurations can be maintained, and the recovery time required to return from sleep mode to the working state is relatively short. The IO level can remain in the working state during sleep. However, peripherals stop working in sleep mode, and the CPU can only be woken up by a few limited wake-up sources, including GPIO interrupts, RTC interrupts, LPTIM interrupts, and inter-core communication interrupts. For the application, the switch between sleep mode and working mode is transparent. Whether to enter the sleep mode is controlled by the lowest priority IDLE thread. When all high-priority threads have no tasks to execute and the IDLE thread is scheduled, the IDLE thread will check if the sleep conditions are met. Once all the following conditions are satisfied, it can enter the sleep mode:
str_cn:没有禁止睡眠模式,str_en:Sleep mode is not prohibited
str_cn:操作系统最近一个将要超时的定时器时间大于门限，默认门限为100ms,str_en:The timeout time of the most recent timer in the operating system is greater than the threshold, with a default threshold of 100ms
str_cn:不满足唤醒条件，比如使能了某个唤醒源，该唤醒源并未被激活,str_en:The wake-up condition is not met, for example, a wake-up source is enabled but has not been activated
str_cn:发送给小核的数据已被读走,str_en:The data sent to the small core has been read
str_cn:进入睡眠模式前会根据操作系统最近一个定时器的超时时间启动LPTIM，LPTIM的中断时间设置为操作系统定时器的超时时间，比如最近一个定时器在200ms后超时，会把LPTIM配置成200ms后触发中断，即200ms后唤醒大核，因此即使进入了睡眠模式，应用程序仍旧可以按时醒来调用操作系统定时器超时函数。,str_en:Before entering the sleep mode, the LPTIM will be started according to the timeout time of the most recent timer in the operating system. The interrupt time of the LPTIM is set to the timeout time of the operating system timer. For example, if the most recent timer times out after 200ms, the LPTIM will be configured to trigger an interrupt after 200ms, which means waking up the large core after 200ms. Therefore, even if it enters the sleep mode, the application can still wake up on time to call the operating system timer timeout function.
str_cn:应用程序使用rt_pm_request(PM_SLEEP_MODE_IDLE)禁止进入睡眠模式，直到调用rt_pm_release(PM_SLEEP_MODE_IDLE)释放请求。外设工作时，基于RT-Thread的驱动框架会自动调用rt_pm_request禁止睡眠，避免中断模式下误进入睡眠模式。,str_en:The application uses rt_pm_request(PM_SLEEP_MODE_IDLE) to prohibit entering the sleep mode until rt_pm_release(PM_SLEEP_MODE_IDLE) is called to release the request. When the peripheral is working, the RT-Thread based driver framework will automatically call rt_pm_request to prohibit sleep, avoiding mistakenly entering the sleep mode in the interrupt mode.
str_cn:deepsleep模式默认的定时器门限为100ms,str_en:The default timer threshold for deepsleep mode is 100ms
str_cn:可以使用rt_pm_policy_register注册自定义的策略表，其中thresh表示定时器门限，mode表示大于该门限后可以进入的睡眠模式。,str_en:You can use rt_pm_policy_register to register a custom policy table, where thresh represents the timer threshold, and mode represents the sleep mode that can be entered after exceeding this threshold.
str_cn:进入睡眠时如果有外设需要掉电降低功耗，可以在BSP_IO_Power_Down中修改配置，相应的可以在BSP_Power_Up中给外设上电，该函数在睡眠醒来后会被调用。,str_en:When entering sleep mode, if there are peripherals that need to power down to reduce power consumption, the configuration can be modified in BSP_IO_Power_Down, and correspondingly, the peripherals can be powered up in BSP_Power_Up, which will be called after waking up from sleep.
str_cn:进入IDLE线程，但不满足睡眠条件时，大核可以通过降频来降低WFI期间的电流，降频的条件为高速外设不在工作，高速外设包括：EPIC,EZIP,LCDC,USB,SD,str_en:When entering the IDLE thread but not meeting the sleep conditions, the main core can reduce the current during WFI by downclocking. The condition for downclocking is that high-speed peripherals are not working. High-speed peripherals include: EPIC, EZIP, LCDC, USB, SD
str_cn:检查EPIC/EZIP是否在工作并未置于HAL驱动中，而是集成在LVGL图形库中，如果没有使用SDK自带的LVGL实现，需要调用rt_pm_hw_device_start指示高速外设开始工作，避免降频执行WFI，外设结束工作后调用rt_pm_hw_device_stop。,str_en:Checking whether EPIC/EZIP is working is not placed in the HAL driver but integrated into the LVGL graphics library. If the LVGL implementation that comes with the SDK is not used, rt_pm_hw_device_start needs to be called to indicate that the high-speed peripheral starts working, avoiding executing WFI at a reduced frequency. After the peripheral finishes working, rt_pm_hw_device_stop is called.
str_cn:LCDC/USB/SD是否工作的判断集成在了RT_Thread的LCD Device驱动中。,str_en:The judgment of whether LCDC/USB/SD is working is integrated into the LCD Device driver of RT_Thread.
str_cn:降频后的WFI频率由函数HAL_RCC_HCPU_SetDeepWFIDiv配置，需要注意当有音频外设在工作时，只能降频到48MHz，除此以外可以降频到4MHz，同时要把hwp_hpsys_rcc->DBGR的HPSYS_RCC_DBGR_FORCE_HP比特置1。,str_en:The WFI frequency after downclocking is configured by the function HAL_RCC_HCPU_SetDeepWFIDiv. It should be noted that when an audio peripheral is working, it can only be downclocked to 48MHz otherwise, it can be downclocked to 4MHz. At the same time, the HPSYS_RCC_DBGR_FORCE_HP bit of hwp_hpsys_rcc->DBGR must be set to 1.
str_cn:对于无需高性能计算的场景，大核还可以通过降频降压来降低工作功耗，比如手表灭屏后运行抬腕算法，可以将系统频率降到48MHz，虽然随着CPU频率变慢，算法执行时间也会变长，但总功耗（即电流与时间的乘积）仍旧会更低，可以实测不同运行模式的场景功耗，选择功耗最优的模式。,str_en:For scenarios that do not require high-performance computing, the main core can also reduce the operating power consumption by downclocking and reducing voltage. For example, after the watch screen turns off and runs the wrist-raising algorithm, the system frequency can be reduced to 48MHz
str_cn:无内容,str_en:No content
